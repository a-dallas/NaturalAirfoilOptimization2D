%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                              %
% SU2 configuration file                                                       %
% Case description: _________________________________________________________  %
% Author: ___________________________________________________________________  %
% Institution: ______________________________________________________________  %
% Date: __________                                                             %
% File Version 7.0.7 "Blackbird"                                                  %
%                                                                              %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% ------------- DIRECT, ADJOINT, AND LINEARIZED PROBLEM DEFINITION ------------%
%
% Solver type (EULER, NAVIER_STOKES, RANS,
%                               INC_EULER, INC_NAVIER_STOKES, INC_RANS,
%                               NEMO_EULER, NEMO_NAVIER_STOKES,
%                               FEM_EULER, FEM_NAVIER_STOKES, FEM_RANS, FEM_LES,
%                               HEAT_EQUATION_FVM, ELASTICITY)
SOLVER= EULER
%
% Specify turbulence model (NONE, SA, SA_NEG, SST, SA_E, SA_COMP, SA_E_COMP, SST_SUST)
KIND_TURB_MODEL= NONE
%
% Mathematical problem (DIRECT, CONTINUOUS_ADJOINT, DISCRETE_ADJOINT)
MATH_PROBLEM= DISCRETE_ADJOINT
%
% Restart solution (NO, YES)
RESTART_SOL= NO
%
% Discard the data storaged in the solution and geometry files
% e.g. AOA, dCL/dAoA, dCD/dCL, iter, etc.
% Note that AoA in the solution and geometry files is critical
% to aero design using AoA as a variable. (NO, YES)
DISCARD_INFILES= NO
%
% System of measurements (SI, US)
% International system of units (SI): ( meters, kilograms, Kelvins,
%                                       Newtons = kg m/s^2, Pascals = N/m^2, 
%                                       Density = kg/m^3, Speed = m/s,
%                                       Equiv. Area = m^2 )
% United States customary units (US): ( inches, slug, Rankines, lbf = slug ft/s^2, 
%                                       psf = lbf/ft^2, Density = slug/ft^3, 
%                                       Speed = ft/s, Equiv. Area = ft^2 )
SYSTEM_MEASUREMENTS= SI
%
%
% ------------------------------- SOLVER CONTROL ------------------------------%
%
% Maximum number of inner iterations
INNER_ITER= 1000
%
%
% Convergence field 
CONV_FIELD= DRAG
%
% Min value of the residual (log10 of the residual)
CONV_RESIDUAL_MINVAL= -8
%
% Start convergence criteria at iteration number
CONV_STARTITER= 10
%
% Number of elements to apply the criteria
CONV_CAUCHY_ELEMS= 100
%
% Epsilon to control the series convergence
CONV_CAUCHY_EPS= 1E-10
%
% Iteration number to begin unsteady restarts
RESTART_ITER= 0
%
%% Time convergence monitoring
WINDOW_CAUCHY_CRIT = YES
%
% List of time convergence fields 
CONV_WINDOW_FIELD = (TAVG_DRAG, TAVG_LIFT)
%
% Time Convergence Monitoring starts at Iteration WINDOW_START_ITER + CONV_WINDOW_STARTITER
CONV_WINDOW_STARTITER = 0
%
% Epsilon to control the series convergence
CONV_WINDOW_CAUCHY_EPS = 1E-3
%
% Number of elements to apply the criteria
CONV_WINDOW_CAUCHY_ELEMS = 10
%
% -------------------- COMPRESSIBLE FREE-STREAM DEFINITION --------------------%
%
% Mach number (non-dimensional, based on the free-stream values)
MACH_NUMBER= 0.8
%
% Angle of attack (degrees, only for compressible flows)
AOA= 1.25
%
% Side-slip angle (degrees, only for compressible flows)
SIDESLIP_ANGLE= 0.0
%
% Init option to choose between Reynolds (default) or thermodynamics quantities
% for initializing the solution (REYNOLDS, TD_CONDITIONS)
INIT_OPTION= REYNOLDS
%
% Free-stream option to choose between density and temperature (default) for
% initializing the solution (TEMPERATURE_FS, DENSITY_FS)
FREESTREAM_OPTION= TEMPERATURE_FS
%
% Free-stream pressure (101325.0 N/m^2, 2116.216 psf by default)
FREESTREAM_PRESSURE= 26436.3
%
% Free-stream temperature (288.15 K, 518.67 R by default)
FREESTREAM_TEMPERATURE= 223.150
%
% Free-stream VIBRATIONAL temperature (288.15 K, 518.67 R by default)
FREESTREAM_TEMPERATURE_VE= 223.150
%
% Reynolds number (non-dimensional, based on the free-stream values)
REYNOLDS_NUMBER= 6748182
%
% Reynolds length (1 m, 1 inch by default)
REYNOLDS_LENGTH= 1.0
%
% Free-stream density (1.2886 Kg/m^3, 0.0025 slug/ft^3 by default)
FREESTREAM_DENSITY= 0.412707
%
% Free-stream velocity (1.0 m/s, 1.0 ft/s by default)
FREESTREAM_VELOCITY= ( 1.0, 0.00, 0.00 )
%
% Free-stream viscosity (1.853E-5 N s/m^2, 3.87E-7 lbf s/ft^2 by default)
FREESTREAM_VISCOSITY= 0.0000146884
%
% Compressible flow non-dimensionalization (DIMENSIONAL, FREESTREAM_PRESS_EQ_ONE,
%                              FREESTREAM_VEL_EQ_MACH, FREESTREAM_VEL_EQ_ONE)
REF_DIMENSIONALIZATION= FREESTREAM_PRESS_EQ_ONE

% ----------------------------- CL DRIVER DEFINITION ---------------------------%
%
% Activate fixed lift mode (specify a CL instead of AoA, NO/YES)
FIXED_CL_MODE= NO
%
% Target coefficient of lift for fixed lift mode (0.80 by default)
TARGET_CL= 0.80
%
% Estimation of dCL/dAlpha (0.2 per degree by default)
DCL_DALPHA= 0.2
%
% Maximum number of iterations between AoA updates
UPDATE_AOA_ITER_LIMIT= 100
%
% Number of iterations to evaluate dCL_dAlpha by using finite differences (500 by default)
ITER_DCL_DALPHA= 500

% ---------------------- REFERENCE VALUE DEFINITION ---------------------------%
%
% Reference origin for moment computation (m or in)
REF_ORIGIN_MOMENT_X = 0.25
REF_ORIGIN_MOMENT_Y = 0.00
REF_ORIGIN_MOMENT_Z = 0.00
%
% Reference length for moment non-dimensional coefficients (m or in)
REF_LENGTH= 1.0
%
% Reference area for non-dimensional force coefficients (0 implies automatic
% calculation) (m^2 or in^2)
REF_AREA= 1.0
%
% Aircraft semi-span (0 implies automatic calculation) (m or in)
SEMI_SPAN= 0.0

% ---- NONEQUILIBRIUM GAS, IDEAL GAS, POLYTROPIC, VAN DER WAALS AND PENG ROBINSON CONSTANTS -------%
%
% Fluid model (STANDARD_AIR, IDEAL_GAS, VW_GAS, PR_GAS,
%              CONSTANT_DENSITY, INC_IDEAL_GAS, INC_IDEAL_GAS_POLY, MUTATIONPP, USER_DEFINED_NONEQ)
FLUID_MODEL= STANDARD_AIR
%
% Ratio of specific heats (1.4 default and the value is hardcoded
%                          for the model STANDARD_AIR, compressible only)
GAMMA_VALUE= 1.4
%
% Specific gas constant (287.058 J/kg*K default and this value is hardcoded
%                        for the model STANDARD_AIR, compressible only)
GAS_CONSTANT= 287.058
%
% Critical Temperature (131.00 K by default)
CRITICAL_TEMPERATURE= 131.00
%
% Critical Pressure (3588550.0 N/m^2 by default)
CRITICAL_PRESSURE= 3588550.0
%
% Acentri factor (0.035 (air))
ACENTRIC_FACTOR= 0.035
%
% Specific heat at constant pressure, Cp (1004.703 J/kg*K (air)). 
% Incompressible fluids with energy eqn. only (CONSTANT_DENSITY, INC_IDEAL_GAS).
SPECIFIC_HEAT_CP= 1004.703
%
% Thermal expansion coefficient (0.00347 K^-1 (air)) 
% Used with Boussinesq approx. (incompressible, BOUSSINESQ density model only)
THERMAL_EXPANSION_COEFF= 0.00347
%
% Molecular weight for an incompressible ideal gas (28.96 g/mol (air) default)
MOLECULAR_WEIGHT= 28.96
%
% Temperature polynomial coefficients (up to quartic) for specific heat Cp.
% Format -> Cp(T) : b0 + b1*T + b2*T^2 + b3*T^3 + b4*T^4
CP_POLYCOEFFS= (0.0, 0.0, 0.0, 0.0, 0.0)
%
% Nonequilibrium fluid options
%
% Gas model - mixture
GAS_MODEL= AIR-5
%
% Initial gas composition in mass fractions
GAS_COMPOSITION= (0.77, 0.23, 0.0, 0.0, 0.0)
%
% Freeze chemical reactions
FROZEN_MIXTURE= NO
%
% --------------------------- VISCOSITY MODEL ---------------------------------%
%
% Viscosity model (SUTHERLAND, CONSTANT_VISCOSITY, POLYNOMIAL_VISCOSITY).
VISCOSITY_MODEL= SUTHERLAND
%
% Molecular Viscosity that would be constant (1.716E-5 by default)
MU_CONSTANT= 1.716E-5
%
% Sutherland Viscosity Ref (1.716E-5 default value for AIR SI)
MU_REF= 1.716E-5
%
% Sutherland Temperature Ref (273.15 K default value for AIR SI)
MU_T_REF= 273.15
%
% Sutherland constant (110.4 default value for AIR SI)
SUTHERLAND_CONSTANT= 110.4
%
% Temperature polynomial coefficients (up to quartic) for viscosity.
% Format -> Mu(T) : b0 + b1*T + b2*T^2 + b3*T^3 + b4*T^4
MU_POLYCOEFFS= (0.0, 0.0, 0.0, 0.0, 0.0)

% -------------------- BOUNDARY CONDITION DEFINITION --------------------------%
%
% Euler wall boundary marker(s) (NONE = no marker)
% Implementation identical to MARKER_SYM.
MARKER_EULER= ( airfoil )
%
% Navier-Stokes (no-slip), constant heat flux wall  marker(s) (NONE = no marker)
% Format: ( marker name, constant heat flux (J/m^2), ... )
MARKER_HEATFLUX= ( NONE )
%
% Navier-Stokes (no-slip), isothermal wall marker(s) (NONE = no marker)
% Format: ( marker name, constant wall temperature (K), ... )
MARKER_ISOTHERMAL= ( NONE )
%
% Far-field boundary marker(s) (NONE = no marker)
MARKER_FAR= ( farfield )
%
% Symmetry boundary marker(s) (NONE = no marker)
% Implementation identical to MARKER_EULER.
MARKER_SYM= ( NONE )
%
% Internal boundary marker(s) e.g. no boundary condition (NONE = no marker)
MARKER_INTERNAL= ( NONE )
%
% Near-Field boundary marker(s) (NONE = no marker)
MARKER_NEARFIELD= ( NONE )
%
%
% Inlet boundary type (TOTAL_CONDITIONS, MASS_FLOW)
INLET_TYPE= TOTAL_CONDITIONS
%
% Read inlet profile from a file (YES, NO) default: NO
SPECIFIED_INLET_PROFILE= NO
%
% File specifying inlet profile
INLET_FILENAME= inlet.dat
%
% Inlet boundary marker(s) with the following formats (NONE = no marker)
% Total Conditions: (inlet marker, total temp, total pressure, flow_direction_x,
%           flow_direction_y, flow_direction_z, ... ) where flow_direction is
%           a unit vector.
% Mass Flow: (inlet marker, density, velocity magnitude, flow_direction_x,
%           flow_direction_y, flow_direction_z, ... ) where flow_direction is
%           a unit vector.
% Inc. Velocity: (inlet marker, temperature, velocity magnitude, flow_direction_x,
%           flow_direction_y, flow_direction_z, ... ) where flow_direction is
%           a unit vector.
% Inc. Pressure: (inlet marker, temperature, total pressure, flow_direction_x,
%           flow_direction_y, flow_direction_z, ... ) where flow_direction is
%           a unit vector.
MARKER_INLET= ( NONE )
%
% Outlet boundary marker(s) (NONE = no marker)
% Compressible: ( outlet marker, back pressure (static thermodynamic), ... )
% Inc. Pressure: ( outlet marker, back pressure (static gauge in Pa), ... )
% Inc. Mass Flow: ( outlet marker, mass flow target (kg/s), ... )
MARKER_OUTLET= ( NONE )
%
% Actuator disk boundary type (VARIABLE_LOAD, VARIABLES_JUMP, BC_THRUST,
%                              DRAG_MINUS_THRUST)
ACTDISK_TYPE= VARIABLES_JUMP
%
% Actuator disk boundary marker(s) with the following formats (NONE = no marker)
% Variable Load: (inlet face marker, outlet face marker, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
% Variables Jump: ( inlet face marker, outlet face marker,
%                   Takeoff pressure jump (psf), Takeoff temperature jump (R), Takeoff rev/min,
%                   Cruise  pressure jump (psf), Cruise temperature jump (R), Cruise rev/min )
% BC Thrust: ( inlet face marker, outlet face marker,
%              Takeoff BC thrust (lbs), 0.0, Takeoff rev/min,
%              Cruise BC thrust (lbs), 0.0, Cruise rev/min )
% Drag-Thrust: ( inlet face marker, outlet face marker,
%                Takeoff Drag-Thrust (lbs), 0.0, Takeoff rev/min,
%                Cruise Drag-Thrust (lbs), 0.0, Cruise rev/min )
MARKER_ACTDISK= ( NONE )
%
% Actuator disk data input file name
ACTDISK_FILENAME= actuatordisk.dat
%
% Supersonic inlet boundary marker(s) (NONE = no marker)
% Format: (inlet marker, temperature, static pressure, velocity_x,
%           velocity_y, velocity_z, ... ), i.e. primitive variables specified.
MARKER_SUPERSONIC_INLET= ( NONE )
%
% Supersonic outlet boundary marker(s) (NONE = no marker)
MARKER_SUPERSONIC_OUTLET= ( NONE )
%
% Periodic boundary marker(s) (NONE = no marker)
% Format: ( periodic marker, donor marker, rotation_center_x, rotation_center_y,
% rotation_center_z, rotation_angle_x-axis, rotation_angle_y-axis,
% rotation_angle_z-axis, translation_x, translation_y, translation_z, ... )
MARKER_PERIODIC= ( NONE )
%
% Engine Inflow boundary type (FAN_FACE_MACH, FAN_FACE_PRESSURE, FAN_FACE_MDOT)
ENGINE_INFLOW_TYPE= FAN_FACE_MACH
%
% Engine inflow boundary marker(s) (NONE = no marker)
% Format: (engine inflow marker, fan face Mach, ... )
MARKER_ENGINE_INFLOW= ( NONE )
%
% Engine exhaust boundary marker(s) with the following formats (NONE = no marker) 
% Format: (engine exhaust marker, total nozzle temp, total nozzle pressure, ... )
MARKER_ENGINE_EXHAUST= ( NONE )
%
% Displacement boundary marker(s) (NONE = no marker)
% Format: ( displacement marker, displacement value normal to the surface, ... )
MARKER_NORMAL_DISPL= ( NONE )
%
% Pressure boundary marker(s) (NONE = no marker)
% Format: ( pressure marker )
MARKER_PRESSURE= ( NONE )
%
% Riemann boundary marker(s) (NONE = no marker)
% Format: (marker, data kind flag, list of data)
MARKER_RIEMANN= ( NONE )
%
% Shroud boundary marker(s) (NONE = no marker)
% Format: (marker)
% If the ROTATING_FRAME option is activated, this option force
% the velocity on the boundaries specified to 0.0
MARKER_SHROUD= (NONE)
%
% Interface (s) definition, identifies the surface shared by
% two different zones. The interface is defined by listing pairs of
% markers (one from each zone connected by the interface)
% Example:
%   Given an arbitrary number of zones (A, B, C, ...)
%   A and B share a surface, interface 1
%   A and C share a surface, interface 2
% Format: ( marker_A_on_interface_1, marker_B_on_interface_1,
%           marker_A_on_interface_2, marker_C_on_interface_2, ... )
%
MARKER_ZONE_INTERFACE= ( NONE )
%
% Specifies the interface (s)
% The kind of interface is defined by listing pairs of markers (one from each
% zone connected by the interface)
% Example:
%   Given an arbitrary number of zones (A, B, C, ...)
%   A and B share a surface, interface 1
%   A and C share a surface, interface 2
% Format: ( marker_A_on_interface_1, marker_B_on_interface_1,
%           marker_A_on_interface_2, marker_C_on_interface_2, ... )
%
MARKER_FLUID_INTERFACE= ( NONE )
%
% Kind of interface interpolation among different zones (NEAREST_NEIGHBOR,
%                                                        ISOPARAMETRIC, SLIDING_MESH)
KIND_INTERPOLATION= NEAREST_NEIGHBOR
%
% Inflow and Outflow markers must be specified, for each blade (zone), following
% the natural groth of the machine (i.e, from the first blade to the last)
MARKER_TURBOMACHINERY= ( NONE )
%
% Mixing-plane interface markers must be specified to activate the transfer of
% information between zones
MARKER_MIXINGPLANE_INTERFACE= ( NONE )
%
% Giles boundary condition for inflow, outfolw and mixing-plane
% Format inlet:  ( marker, TOTAL_CONDITIONS_PT, Total Pressure , Total Temperature,
% Flow dir-norm, Flow dir-tang, Flow dir-span, under-relax-avg, under-relax-fourier)
% Format outlet: ( marker, STATIC_PRESSURE, Static Pressure value, -, -, -, -, under-relax-avg, under-relax-fourier)
% Format mixing-plane in and out: ( marker, MIXING_IN or MIXING_OUT, -, -, -, -, -, -, under-relax-avg, under-relax-fourier)
MARKER_GILES= ( NONE )
%
% This option insert an extra under relaxation factor for the Giles BC at the hub
% and shroud (under relax factor applied, span percentage to under relax)
GILES_EXTRA_RELAXFACTOR= ( 0.05, 0.05)
%
% YES Non reflectivity activated, NO the Giles BC behaves as a normal 1D characteristic-based BC
SPATIAL_FOURIER= NO
%
% Catalytic wall marker(s) (NONE = no marker)
% Format: ( marker name, ... )
CATALYTIC_WALL= ( NONE )

% ------------------------ WALL ROUGHNESS DEFINITION --------------------------%
% The equivalent sand grain roughness height (k_s) on each of the wall. This must be in m. 
% This is a list of (string, double) each element corresponding to the MARKER defined in WALL_TYPE.
%WALL_ROUGHNESS = (wall1, ks1, wall2, ks2)
%WALL_ROUGHNESS = (wall1, ks1, wall2, 0.0) %is also allowed

% ------------------------ SURFACES IDENTIFICATION ----------------------------%
%
% Marker(s) of the surface in the surface flow solution file
MARKER_PLOTTING = ( airfoil )
%
% Marker(s) of the surface where the non-dimensional coefficients are evaluated.
MARKER_MONITORING = ( airfoil )
%
% Viscous wall markers for which wall functions must be applied. (NONE = no marker)
% Format: ( marker name, wall function type -NO_WALL_FUNCTION, STANDARD_WALL_FUNCTION,
%           ADAPTIVE_WALL_FUNCTION, SCALABLE_WALL_FUNCTION, EQUILIBRIUM_WALL_MODEL,
%           NONEQUILIBRIUM_WALL_MODEL-, ... )
MARKER_WALL_FUNCTIONS= ( airfoil, NO_WALL_FUNCTION )
%
% Marker(s) of the surface where custom thermal BC's are defined.
MARKER_PYTHON_CUSTOM = ( NONE )
%
% Marker(s) of the surface where obj. func. (design problem) will be evaluated
MARKER_DESIGNING = ( airfoil )
%
% Marker(s) of the surface that is going to be analyzed in detail (massflow, average pressure, distortion, etc)
MARKER_ANALYZE = ( airfoil )
%
% Method to compute the average value in MARKER_ANALYZE (AREA, MASSFLUX).
MARKER_ANALYZE_AVERAGE = MASSFLUX

% ------------- COMMON PARAMETERS DEFINING THE NUMERICAL METHOD ---------------%
%
% Numerical method for spatial gradients (GREEN_GAUSS, WEIGHTED_LEAST_SQUARES)
NUM_METHOD_GRAD= GREEN_GAUSS

% Numerical method for spatial gradients to be used for MUSCL reconstruction
% Options are (GREEN_GAUSS, WEIGHTED_LEAST_SQUARES, LEAST_SQUARES). Default value is
% NONE and the method specified in NUM_METHOD_GRAD is used. 
NUM_METHOD_GRAD_RECON = LEAST_SQUARES
%
% CFL number (initial value for the adaptive CFL number)
CFL_NUMBER= 25.0
%
% Adaptive CFL number (NO, YES)
CFL_ADAPT= NO
%
% Parameters of the adaptive CFL number (factor down, factor up, CFL min value,
%                                        CFL max value )
CFL_ADAPT_PARAM= ( 0.1, 2.0, 10.0, 1e10 )
%
% Maximum Delta Time in local time stepping simulations
MAX_DELTA_TIME= 1E6
%
% Runge-Kutta alpha coefficients
RK_ALPHA_COEFF= ( 0.66667, 0.66667, 1.000000 )
%
% Objective function in gradient evaluation   (DRAG, LIFT, SIDEFORCE, MOMENT_X,
%                                             MOMENT_Y, MOMENT_Z, EFFICIENCY, BUFFET,
%                                             EQUIVALENT_AREA, NEARFIELD_PRESSURE,
%                                             FORCE_X, FORCE_Y, FORCE_Z, THRUST,
%                                             TORQUE, TOTAL_HEATFLUX,
%                                             MAXIMUM_HEATFLUX, INVERSE_DESIGN_PRESSURE,
%                                             INVERSE_DESIGN_HEATFLUX, SURFACE_TOTAL_PRESSURE, 
%                                             SURFACE_MASSFLOW, SURFACE_STATIC_PRESSURE, SURFACE_MACH)
% For a weighted sum of objectives: separate by commas, add OBJECTIVE_WEIGHT and MARKER_MONITORING in matching order.
OBJECTIVE_FUNCTION= DRAG
%
% List of weighting values when using more than one OBJECTIVE_FUNCTION. Separate by commas and match with MARKER_MONITORING.
OBJECTIVE_WEIGHT = 1.0

% ----------- SLOPE LIMITER AND DISSIPATION SENSOR DEFINITION -----------------%
%
% Monotonic Upwind Scheme for Conservation Laws (TVD) in the flow equations.
%           Required for 2nd order upwind schemes (NO, YES)
MUSCL_FLOW= YES
%
% Slope limiter (NONE, VENKATAKRISHNAN, VENKATAKRISHNAN_WANG,
%                BARTH_JESPERSEN, VAN_ALBADA_EDGE)
SLOPE_LIMITER_FLOW= VENKATAKRISHNAN
%
% Monotonic Upwind Scheme for Conservation Laws (TVD) in the turbulence equations.
%           Required for 2nd order upwind schemes (NO, YES)
MUSCL_TURB= NO
%
% Slope limiter (NONE, VENKATAKRISHNAN, VENKATAKRISHNAN_WANG,
%                BARTH_JESPERSEN, VAN_ALBADA_EDGE)
SLOPE_LIMITER_TURB= VENKATAKRISHNAN
%
% Monotonic Upwind Scheme for Conservation Laws (TVD) in the adjoint flow equations.
%           Required for 2nd order upwind schemes (NO, YES)
MUSCL_ADJFLOW= YES
%
% Slope limiter (NONE, VENKATAKRISHNAN, BARTH_JESPERSEN, VAN_ALBADA_EDGE,
%                SHARP_EDGES, WALL_DISTANCE)
SLOPE_LIMITER_ADJFLOW= VENKATAKRISHNAN
%
% Monotonic Upwind Scheme for Conservation Laws (TVD) in the turbulence adjoint equations.
%           Required for 2nd order upwind schemes (NO, YES)
MUSCL_ADJTURB= NO
%
% Slope limiter (NONE, VENKATAKRISHNAN, BARTH_JESPERSEN, VAN_ALBADA_EDGE)
SLOPE_LIMITER_ADJTURB= VENKATAKRISHNAN
%
% Coefficient for the Venkat's limiter (upwind scheme). A larger values decrease
%             the extent of limiting, values approaching zero cause
%             lower-order approximation to the solution (0.05 by default)
VENKAT_LIMITER_COEFF= 0.05
%
% Reference coefficient for detecting sharp edges (3.0 by default).
REF_SHARP_EDGES = 3.0
%
% Coefficient for the adjoint sharp edges limiter (3.0 by default).
ADJ_SHARP_LIMITER_COEFF= 3.0
%
% Remove sharp edges from the sensitivity evaluation (NO, YES)
SENS_REMOVE_SHARP = NO
%
% Freeze the value of the limiter after a number of iterations
LIMITER_ITER= 999999
%
% 1st order artificial dissipation coefficients for
%     the Lax–Friedrichs method ( 0.15 by default )
LAX_SENSOR_COEFF= 0.15
%
% 2nd and 4th order artificial dissipation coefficients for
%     the JST method ( 0.5, 0.02 by default )
JST_SENSOR_COEFF= ( 0.5, 0.02 )
%
% 1st order artificial dissipation coefficients for
%     the adjoint Lax–Friedrichs method ( 0.15 by default )
ADJ_LAX_SENSOR_COEFF= 0.15
%
% 2nd, and 4th order artificial dissipation coefficients for
%     the adjoint JST method ( 0.5, 0.02 by default )
ADJ_JST_SENSOR_COEFF= ( 0.5, 0.02 )

% ------------------------ LINEAR SOLVER DEFINITION ---------------------------%
%
% Linear solver or smoother for implicit formulations:
% BCGSTAB, FGMRES, RESTARTED_FGMRES, CONJUGATE_GRADIENT (self-adjoint problems only), SMOOTHER.
LINEAR_SOLVER= FGMRES
%
% Same for discrete adjoint (smoothers not supported)
DISCADJ_LIN_SOLVER= FGMRES
%
% Preconditioner of the Krylov linear solver or type of smoother (ILU, LU_SGS, LINELET, JACOBI)
LINEAR_SOLVER_PREC= ILU
%
% Same for discrete adjoint (JACOBI or ILU)
DISCADJ_LIN_PREC= ILU
%
% Linael solver ILU preconditioner fill-in level (0 by default)
LINEAR_SOLVER_ILU_FILL_IN= 0
%
% Minimum error of the linear solver for implicit formulations
LINEAR_SOLVER_ERROR= 1E-6
%
% Max number of iterations of the linear solver for the implicit formulation
LINEAR_SOLVER_ITER= 5
%
% Restart frequency for RESTARTED_FGMRES
LINEAR_SOLVER_RESTART_FREQUENCY= 10
%
% Relaxation factor for smoother-type solvers (LINEAR_SOLVER= SMOOTHER)
LINEAR_SOLVER_SMOOTHER_RELAXATION= 1.0

% -------------------- FLOW NUMERICAL METHOD DEFINITION -----------------------%
%
% Convective numerical method (JST, JST_KE, JST_MAT, LAX-FRIEDRICH, CUSP, ROE, AUSM,
%                              AUSMPLUSUP, AUSMPLUSUP2, AUSMPWPLUS, HLLC, TURKEL_PREC,
%                              SW, MSW, FDS, SLAU, SLAU2, L2ROE, LMROE)
CONV_NUM_METHOD_FLOW= JST
%
% Roe Low Dissipation function for Hybrid RANS/LES simulations (FD, NTS, NTS_DUCROS)
ROE_LOW_DISSIPATION= FD
%
% Post-reconstruction correction for low Mach number flows (NO, YES)
LOW_MACH_CORR= NO
%
% Roe-Turkel preconditioning for low Mach number flows (NO, YES)
LOW_MACH_PREC= NO
%
% Use numerically computed Jacobians for AUSM+up(2) and SLAU(2)
% Slower per iteration but potentialy more stable and capable of higher CFL
USE_ACCURATE_FLUX_JACOBIANS= NO
%
% Use the vectorized version of the selected numerical method (available for JST family and Roe).
% SU2 should be compiled for an AVX or AVX512 architecture for best performance.
USE_VECTORIZATION= NO
%
% Entropy fix coefficient (0.0 implies no entropy fixing, 1.0 implies scalar
%                          artificial dissipation)
ENTROPY_FIX_COEFF= 0.0
%
% Higher values than 1 (3 to 4) make the global Jacobian of central schemes (compressible flow
% only) more diagonal dominant (but mathematically incorrect) so that higher CFL can be used.
CENTRAL_JACOBIAN_FIX_FACTOR= 4.0
%
% Time discretization (RUNGE-KUTTA_EXPLICIT, EULER_IMPLICIT, EULER_EXPLICIT)
TIME_DISCRE_FLOW= EULER_IMPLICIT

% ------------------- FEM FLOW NUMERICAL METHOD DEFINITION --------------------%
%
% FEM numerical method (DG)
NUM_METHOD_FEM_FLOW= DG
%
% Riemann solver used for DG (ROE, LAX-FRIEDRICH, AUSM, AUSMPW+, HLLC, VAN_LEER)
RIEMANN_SOLVER_FEM= ROE
%
% Constant factor applied for quadrature with straight elements (2.0 by default)
QUADRATURE_FACTOR_STRAIGHT_FEM = 2.0
%
% Constant factor applied for quadrature with curved elements (3.0 by default)
QUADRATURE_FACTOR_CURVED_FEM = 3.0
%
% Factor for the symmetrizing terms in the DG FEM discretization (1.0 by default)
THETA_INTERIOR_PENALTY_DG_FEM = 1.0
%
% Compute the entropy in the fluid model (YES, NO)
COMPUTE_ENTROPY_FLUID_MODEL= YES
%
% Use the lumped mass matrix for steady DGFEM computations (NO, YES)
USE_LUMPED_MASSMATRIX_DGFEM= NO
%
% Only compute the exact Jacobian of the spatial discretization (NO, YES)
JACOBIAN_SPATIAL_DISCRETIZATION_ONLY= NO
%
% Number of aligned bytes for the matrix multiplications. Multiple of 64. (128 by default)
ALIGNED_BYTES_MATMUL= 128
%
% Time discretization (RUNGE-KUTTA_EXPLICIT, CLASSICAL_RK4_EXPLICIT, ADER_DG)
TIME_DISCRE_FEM_FLOW= RUNGE-KUTTA_EXPLICIT
%
% Number of time DOFs for the predictor step of ADER-DG (2 by default)
%TIME_DOFS_ADER_DG= 2
% Factor applied during quadrature in time for ADER-DG. (2.0 by default)
%QUADRATURE_FACTOR_TIME_ADER_DG = 2.0
%
% Type of discretization used in the predictor step of ADER-DG (ADER_ALIASED_PREDICTOR, ADER_NON_ALIASED_PREDICTOR)
ADER_PREDICTOR= ADER_ALIASED_PREDICTOR
% Number of time levels for time accurate local time stepping. (1 by default, max. allowed 15)
LEVELS_TIME_ACCURATE_LTS= 1
%
% Specify the method for matrix coloring for Jacobian computations (GREEDY_COLORING, NATURAL_COLORING)
KIND_MATRIX_COLORING= GREEDY_COLORING

% -------------------- TURBULENT NUMERICAL METHOD DEFINITION ------------------%
%
% Convective numerical method (SCALAR_UPWIND)
CONV_NUM_METHOD_TURB= SCALAR_UPWIND
%
% Time discretization (EULER_IMPLICIT)
TIME_DISCRE_TURB= EULER_IMPLICIT
%
% Reduction factor of the CFL coefficient in the turbulence problem
CFL_REDUCTION_TURB= 1.0

% --------------------- HEAT NUMERICAL METHOD DEFINITION ----------------------%
%
% Value of the thermal diffusivity
THERMAL_DIFFUSIVITY= 1.0

% ---------------- ADJOINT-FLOW NUMERICAL METHOD DEFINITION -------------------%
%
% Frozen the slope limiter in the discrete adjoint formulation (NO, YES)
FROZEN_LIMITER_DISC= NO
%
% Frozen the turbulent viscosity in the discrete adjoint formulation (NO, YES)
FROZEN_VISC_DISC= NO
%
% Use an inconsistent spatial integration (primal-dual) in the discrete
% adjoint formulation. The AD will use the numerical methods in
% the ADJOINT-FLOW NUMERICAL METHOD DEFINITION section (NO, YES)
INCONSISTENT_DISC= NO
%
% Convective numerical method (JST, LAX-FRIEDRICH, ROE)
CONV_NUM_METHOD_ADJFLOW= JST
%
% Time discretization (RUNGE-KUTTA_EXPLICIT, EULER_IMPLICIT)
TIME_DISCRE_ADJFLOW= EULER_IMPLICIT
%
% Relaxation coefficient (also for discrete adjoint problems)
RELAXATION_FACTOR_ADJOINT= 1.0
%
% Enable (if != 0) quasi-Newton acceleration/stabilization of discrete adjoints
QUASI_NEWTON_NUM_SAMPLES= 20
%
% Reduction factor of the CFL coefficient in the adjoint problem
CFL_REDUCTION_ADJFLOW= 0.8
%
% Limit value for the adjoint variable
LIMIT_ADJFLOW= 1E6
%
% Use multigrid in the adjoint problem (NO, YES)
MG_ADJFLOW= YES

% ---------------- ADJOINT-TURBULENT NUMERICAL METHOD DEFINITION --------------%
%
% Convective numerical method (SCALAR_UPWIND)
CONV_NUM_METHOD_ADJTURB= SCALAR_UPWIND
%
% Time discretization (EULER_IMPLICIT)
TIME_DISCRE_ADJTURB= EULER_IMPLICIT
%
% Reduction factor of the CFL coefficient in the adjoint turbulent problem
CFL_REDUCTION_ADJTURB= 0.01

% ----------------------- GEOMETRY EVALUATION PARAMETERS ----------------------%
%
% Marker(s) of the surface where geometrical based function will be evaluated
GEO_MARKER= ( airfoil )
%
% Description of the geometry to be analyzed (AIRFOIL, WING)
GEO_DESCRIPTION= AIRFOIL
%
% Coordinate of the stations to be analyzed
GEO_LOCATION_STATIONS= (0.0, 0.5, 1.0)
%
% Geometrical bounds (Y coordinate) for the wing geometry analysis or
% fuselage evaluation (X coordinate)
GEO_BOUNDS= (1.5, 3.5)
%
% Plot loads and Cp distributions on each airfoil section
GEO_PLOT_STATIONS= NO
%
% Number of section cuts to make when calculating wing geometry
GEO_NUMBER_STATIONS= 25
%
% Geometrical evaluation mode (FUNCTION, GRADIENT)
GEO_MODE= FUNCTION

% ------------------------- GRID ADAPTATION STRATEGY --------------------------%
%
% Kind of grid adaptation (NONE, PERIODIC, FULL, FULL_FLOW, GRAD_FLOW,
%                          FULL_ADJOINT, GRAD_ADJOINT, GRAD_FLOW_ADJ, ROBUST,
%                          FULL_LINEAR, COMPUTABLE, COMPUTABLE_ROBUST,
%                          REMAINING, WAKE, SMOOTHING, SUPERSONIC_SHOCK)
KIND_ADAPT= NONE
%
% Percentage of new elements (% of the original number of elements)
NEW_ELEMS= 5
%
% Scale factor for the dual volume
DUALVOL_POWER= 0.5
%
% Adapt the boundary elements (NO, YES)
ADAPT_BOUNDARY= YES

% ----------------------- DESIGN VARIABLE PARAMETERS --------------------------%
%
% Kind of deformation (NO_DEFORMATION, SCALE_GRID, TRANSLATE_GRID, ROTATE_GRID,
%                      FFD_SETTING, FFD_NACELLE,
%                      FFD_CONTROL_POINT, FFD_CAMBER, FFD_THICKNESS, FFD_TWIST
%                      FFD_CONTROL_POINT_2D, FFD_CAMBER_2D, FFD_THICKNESS_2D, 
%                      FFD_TWIST_2D, HICKS_HENNE, SURFACE_BUMP, SURFACE_FILE)
DV_KIND= FFD_SETTING
%
% Marker of the surface in which we are going apply the shape deformation
DV_MARKER= ( airfoil )
%
% Parameters of the shape deformation
% - NO_DEFORMATION ( 1.0 )
% - TRANSLATE_GRID ( x_Disp, y_Disp, z_Disp ), as a unit vector
% - ROTATE_GRID ( x_Orig, y_Orig, z_Orig, x_End, y_End, z_End ) axis, DV_VALUE in deg.
% - SCALE_GRID ( 1.0 )
% - ANGLE_OF_ATTACK ( 1.0 )
% - FFD_SETTING ( 1.0 )
% - FFD_CONTROL_POINT ( FFD_BoxTag, i_Ind, j_Ind, k_Ind, x_Disp, y_Disp, z_Disp )
% - FFD_NACELLE ( FFD_BoxTag, rho_Ind, theta_Ind, phi_Ind, rho_Disp, phi_Disp )
% - FFD_GULL ( FFD_BoxTag, j_Ind )
% - FFD_ANGLE_OF_ATTACK ( FFD_BoxTag, 1.0 )
% - FFD_CAMBER ( FFD_BoxTag, i_Ind, j_Ind )
% - FFD_THICKNESS ( FFD_BoxTag, i_Ind, j_Ind )
% - FFD_TWIST ( FFD_BoxTag, j_Ind, x_Orig, y_Orig, z_Orig, x_End, y_End, z_End )
% - FFD_CONTROL_POINT_2D ( FFD_BoxTag, i_Ind, j_Ind, x_Disp, y_Disp )
% - FFD_CAMBER_2D ( FFD_BoxTag, i_Ind )
% - FFD_THICKNESS_2D ( FFD_BoxTag, i_Ind )
% - FFD_TWIST_2D ( FFD_BoxTag, x_Orig, y_Orig )
% - HICKS_HENNE ( Lower Surface (0)/Upper Surface (1)/Only one Surface (2), x_Loc )
% - SURFACE_BUMP ( x_Start, x_End, x_Loc )
DV_PARAM= ( 1, 0.5 )
%
% Value of the shape deformation
DV_VALUE= 0.01
%
% For DV_KIND = SURFACE_FILE: With SU2_DEF, give filename for surface
% deformation prescribed by an external parameterization. List moving markers
% in DV_MARKER and provide an ASCII file with name specified with DV_FILENAME
% and with format:
% GlobalID_0, x_0, y_0, z_0
% GlobalID_1, x_1, y_1, z_1
%   ...
% GlobalID_N, x_N, y_N, z_N
% where N is the total number of vertices on all moving markers, and x/y/z are
% the new position of each vertex. Points can be in any order. When SU2_DOT
% is called in SURFACE_FILE mode, sensitivities on surfaces will be written
% to an ASCII file with name given by DV_SENS_FILENAME and with format as
% rows of x, y, z, dJ/dx, dJ/dy, dJ/dz for each surface vertex.
DV_FILENAME= surface_positions.dat
DV_SENS_FILENAME= surface_sensitivity.dat
%
% Format for volume sensitivity file read by SU2_DOT (SU2_NATIVE,
% UNORDERED_ASCII). SU2_NATIVE is the native SU2 restart file (default),
% while UNORDERED_ASCII provide a file of field sensitivities
% as an ASCII file with name given by DV_SENS_FILENAMEand with format as
% rows of x, y, z, dJ/dx, dJ/dy, dJ/dz for each grid point.
DV_SENSITIVITY_FORMAT= SU2_NATIVE
DV_UNORDERED_SENS_FILENAME= unordered_sensitivity.dat

% ---------------- MESH DEFORMATION PARAMETERS (NEW SOLVER) -------------------%
%
% Use the reformatted pseudo-elastic solver for grid deformation
DEFORM_MESH= YES
%
% Moving markers which deform the mesh
MARKER_DEFORM_MESH = ( airfoil )

% ------------------------ GRID DEFORMATION PARAMETERS ------------------------%
%
% Linear solver or smoother for implicit formulations (FGMRES, RESTARTED_FGMRES, BCGSTAB)
DEFORM_LINEAR_SOLVER= FGMRES
%
% Preconditioner of the Krylov linear solver (ILU, LU_SGS, JACOBI)
DEFORM_LINEAR_SOLVER_PREC= ILU
%
% Number of smoothing iterations for mesh deformation
DEFORM_LINEAR_SOLVER_ITER= 1000
%
% Number of nonlinear deformation iterations (surface deformation increments)
DEFORM_NONLINEAR_ITER= 1
%
% Minimum residual criteria for the linear solver convergence of grid deformation
DEFORM_LINEAR_SOLVER_ERROR= 1E-14
%
% Print the residuals during mesh deformation to the console (YES, NO)
DEFORM_CONSOLE_OUTPUT= YES
%
% Deformation coefficient (linear elasticity limits from -1.0 to 0.5, a larger
% value is also possible)
DEFORM_COEFF = 1E6
%
% Type of element stiffness imposed for FEA mesh deformation (INVERSE_VOLUME,
%                                           WALL_DISTANCE, CONSTANT_STIFFNESS)
DEFORM_STIFFNESS_TYPE= WALL_DISTANCE
%
% Deform the grid only close to the surface. It is possible to specify how much
% of the volumetric grid is going to be deformed in meters or inches (1E6 by default)
DEFORM_LIMIT = 1E6
%
% Visualize the surface deformation (NO, YES)
VISUALIZE_SURFACE_DEF= YES
%
% Visualize the volume deformation (NO, YES)
VISUALIZE_VOLUME_DEF= NO

% -------------------- FREE-FORM DEFORMATION PARAMETERS -----------------------%
%
% Tolerance of the Free-Form Deformation point inversion
FFD_TOLERANCE= 1E-10
%
% Maximum number of iterations in the Free-Form Deformation point inversion
FFD_ITERATIONS= 500
%
% FFD box definition: 3D case (FFD_BoxTag, X1, Y1, Z1, X2, Y2, Z2, X3, Y3, Z3, X4, Y4, Z4,
%                              X5, Y5, Z5, X6, Y6, Z6, X7, Y7, Z7, X8, Y8, Z8)
%                     2D case (FFD_BoxTag, X1, Y1, 0.0, X2, Y2, 0.0, X3, Y3, 0.0, X4, Y4, 0.0,
%                              0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
FFD_DEFINITION= (MAIN_BOX, 0.5, 0.25, -0.25, 1.5, 0.25, -0.25, 1.5, 0.75, -0.25, 0.5, 0.75, -0.25, 0.5, 0.25, 0.25, 1.5, 0.25, 0.25, 1.5, 0.75, 0.25, 0.5, 0.75, 0.25)
%
% FFD box degree: 3D case (x_degree, y_degree, z_degree)
%                 2D case (x_degree, y_degree, 0)
FFD_DEGREE= (10, 10, 1)
%
% Surface grid continuity at the intersection with the faces of the FFD boxes.
% To keep a particular level of surface continuity, SU2 automatically freezes the right
% number of control point planes (NO_DERIVATIVE, 1ST_DERIVATIVE, 2ND_DERIVATIVE, USER_INPUT)
FFD_CONTINUITY= 2ND_DERIVATIVE
%
% Definition of the FFD planes to be frozen in the FFD (x,y,z).
% Value from 0 FFD degree in that direction. Pick a value larger than degree if you don't want to fix any plane.
FFD_FIX_I= (0,2,3)
FFD_FIX_J= (0,2,3)
FFD_FIX_K= (0,2,3)
%
% There is a symmetry plane (j=0) for all the FFD boxes (YES, NO)
FFD_SYMMETRY_PLANE= NO
%
% FFD coordinate system (CARTESIAN)
FFD_COORD_SYSTEM= CARTESIAN
%
% Vector from the cartesian axis the cylindrical or spherical axis (using cartesian coordinates)
% Note that the location of the axis will affect the wall curvature of the FFD box as well as the
% design variable effect.
FFD_AXIS= (0.0, 0.0, 0.0)
%
% FFD Blending function: Bezier curves with global support (BEZIER), uniform BSplines with local support (BSPLINE_UNIFORM)
FFD_BLENDING= BEZIER
%
% Order of the BSplines
FFD_BSPLINE_ORDER= 2, 2, 2
%
% ------------------- UNCERTAINTY QUANTIFICATION DEFINITION -------------------%
%
% Using uncertainty quantification module (YES, NO). Only available with SST
USING_UQ= NO
%
% Eigenvalue perturbation definition (1, 2, or 3)
UQ_COMPONENT= 1
%
% Permuting eigenvectors (YES, NO)
UQ_PERMUTE= NO
%
% Under-relaxation factor (float [0,1], default = 0.1)
UQ_URLX= 0.1
%
% Perturbation magnitude (float [0,1], default= 1.0)
UQ_DELTA_B= 1.0
%
% --------------------- HYBRID PARALLEL (MPI+OpenMP) OPTIONS ---------------------%
%
% An advanced performance parameter for FVM solvers, a large-ish value should be best
% when relatively few threads per MPI rank are in use (~4). However, maximum parallelism
% is obtained with EDGE_COLORING_GROUP_SIZE=1, consider using this value only if SU2
% warns about low coloring efficiency during preprocessing (performance is usually worse).
% Setting the option to 0 disables coloring and a different strategy is used instead,
% that strategy is automatically used when the coloring efficiency is less than 0.875.
% The optimum value/strategy is case-dependent.
EDGE_COLORING_GROUP_SIZE= 512
%
% Independent "threads per MPI rank" setting for LU-SGS and ILU preconditioners.
% For problems where time is spend mostly in the solution of linear systems (e.g. elasticity,
% very high CFL central schemes), AND, if the memory bandwidth of the machine is saturated
% (4 or more cores per memory channel) better performance (via a reduction in linear iterations)
% may be possible by using a smaller value than that defined by the system or in the call to
% SU2_CFD (via the -t/--threads option).
% The default (0) means "same number of threads as for all else".
LINEAR_SOLVER_PREC_THREADS= 0
%
% ----------------------- PARTITIONING OPTIONS (ParMETIS) ------------------------ %
%
% Load balancing tolerance, lower values will make ParMETIS work harder to evenly
% distribute the work-estimate metric across all MPI ranks, at the expense of more
% edge cuts (i.e. increased communication cost).
PARMETIS_TOLERANCE= 0.02
%
% The work-estimate metric is a weighted function of the work-per-edge (e.g. spatial
% discretization, linear system solution) and of the work-per-point (e.g. source terms,
% temporal discretization) the former usually accounts for >90% of the total.
% These weights are INTEGERS (for compatibility with ParMETIS) thus not [0, 1].
% To balance memory usage (instead of computation) the point weight needs to be
% increased (especially for explicit time integration methods).
PARMETIS_EDGE_WEIGHT= 1
PARMETIS_POINT_WEIGHT= 0
%
% ------------------------- SCREEN/HISTORY VOLUME OUTPUT --------------------------%
%
% Screen output fields (use 'SU2_CFD -d <config_file>' to view list of available fields)
SCREEN_OUTPUT= (INNER_ITER, RMS_DENSITY, RMS_MOMENTUM-X, RMS_MOMENTUM-Y, RMS_ENERGY, LIFT, DRAG)
%
% History output groups (use 'SU2_CFD -d <config_file>' to view list of available fields)
HISTORY_OUTPUT= (ITER, RMS_RES, AERO_COEFF)
%
% Volume output fields/groups (use 'SU2_CFD -d <config_file>' to view list of available fields)
VOLUME_OUTPUT= (COORDINATES, SOLUTION, PRIMITIVE)
%
% Writing frequency for screen output
SCREEN_WRT_FREQ_INNER= 1
%
SCREEN_WRT_FREQ_OUTER= 1
% 
SCREEN_WRT_FREQ_TIME= 1
%
% Writing frequency for history output
HISTORY_WRT_FREQ_INNER= 1
%
HISTORY_WRT_FREQ_OUTER= 1
% 
HISTORY_WRT_FREQ_TIME= 1
%
% Writing frequency for volume/surface output
OUTPUT_WRT_FREQ= 10
%
% ------------------------- INPUT/OUTPUT FILE INFORMATION --------------------------%
%
% Mesh input file
MESH_FILENAME= customAirfoil.su2
%
% Mesh input file format (SU2, CGNS)
MESH_FORMAT= SU2
%
% Mesh output file
MESH_OUT_FILENAME= mesh_out.su2
%
% Restart flow input file
SOLUTION_FILENAME= solution_flow.dat
%
% Restart adjoint input file
SOLUTION_ADJ_FILENAME= solution_adj.dat
%
% Output tabular file format (TECPLOT, CSV)
TABULAR_FORMAT= CSV
%
% Files to output 
% Possible formats : (TECPLOT, TECPLOT_BINARY, SURFACE_TECPLOT,
%  SURFACE_TECPLOT_BINARY, CSV, SURFACE_CSV, PARAVIEW, PARAVIEW_BINARY, SURFACE_PARAVIEW, 
%  SURFACE_PARAVIEW_BINARY, MESH, RESTART_BINARY, RESTART_ASCII, CGNS, STL)
% default : (RESTART, PARAVIEW, SURFACE_PARAVIEW)
OUTPUT_FILES= (RESTART, PARAVIEW, SURFACE_PARAVIEW, SURFACE_CSV)
%
% Output file convergence history (w/o extension)
CONV_FILENAME= history
%
% Output file with the forces breakdown
WRT_FORCES_BREAKDOWN= YES 
BREAKDOWN_FILENAME= forces_breakdown.dat
%
% Output file restart flow
RESTART_FILENAME= restart_flow.dat
%
% Output file restart adjoint
RESTART_ADJ_FILENAME= restart_adj.dat
%
% Output file flow (w/o extension) variables
VOLUME_FILENAME= flow
%
% Output file adjoint (w/o extension) variables
VOLUME_ADJ_FILENAME= adjoint
%
% Output Objective function
VALUE_OBJFUNC_FILENAME= of_eval.dat
%
% Output objective function gradient (using continuous adjoint)
GRAD_OBJFUNC_FILENAME= of_grad.dat
%
% Output file surface flow coefficient (w/o extension)
SURFACE_FILENAME= surface_flow
%
% Output file surface adjoint coefficient (w/o extension)
SURFACE_ADJ_FILENAME= surface_adjoint
%
% Read binary restart files (YES, NO)
READ_BINARY_RESTART= YES
%
% Reorient elements based on potential negative volumes (YES/NO)
REORIENT_ELEMENTS= YES

% --------------------- OPTIMAL SHAPE DESIGN DEFINITION -----------------------%
%
% Available flow based objective functions or constraint functions
%    DRAG, LIFT, SIDEFORCE, EFFICIENCY, BUFFET, 
%    FORCE_X, FORCE_Y, FORCE_Z,
%    MOMENT_X, MOMENT_Y, MOMENT_Z,
%    THRUST, TORQUE, FIGURE_OF_MERIT,
%    EQUIVALENT_AREA, NEARFIELD_PRESSURE,
%    TOTAL_HEATFLUX, MAXIMUM_HEATFLUX,
%    INVERSE_DESIGN_PRESSURE, INVERSE_DESIGN_HEATFLUX,
%    SURFACE_TOTAL_PRESSURE, SURFACE_MASSFLOW
%    SURFACE_STATIC_PRESSURE, SURFACE_MACH
%
% Available geometrical based objective functions or constraint functions
%    AIRFOIL_AREA, AIRFOIL_THICKNESS, AIRFOIL_CHORD, AIRFOIL_TOC, AIRFOIL_AOA,
%    WING_VOLUME, WING_MIN_THICKNESS, WING_MAX_THICKNESS, WING_MAX_CHORD, WING_MIN_TOC, WING_MAX_TWIST, WING_MAX_CURVATURE, WING_MAX_DIHEDRAL
%    STATION#_WIDTH, STATION#_AREA, STATION#_THICKNESS, STATION#_CHORD, STATION#_TOC,
%    STATION#_TWIST (where # is the index of the station defined in GEO_LOCATION_STATIONS)
%
% Available design variables
% 2D Design variables
%    FFD_CONTROL_POINT_2D   (  19, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind, x_Mov, y_Mov )
%    FFD_CAMBER_2D          (  20, Scale | Mark. List | FFD_BoxTag, i_Ind )
%    FFD_THICKNESS_2D       (  21, Scale | Mark. List | FFD_BoxTag, i_Ind )
%    FFD_TWIST_2D           (  22, Scale | Mark. List | FFD_BoxTag, x_Orig, y_Orig )
%    HICKS_HENNE            (  30, Scale | Mark. List | Lower(0)/Upper(1) side, x_Loc )
%    ANGLE_OF_ATTACK        ( 101, Scale | Mark. List | 1.0 )
%
% 3D Design variables
%    FFD_CONTROL_POINT      (  11, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind, k_Ind, x_Mov, y_Mov, z_Mov )
%    FFD_NACELLE            (  12, Scale | Mark. List | FFD_BoxTag, rho_Ind, theta_Ind, phi_Ind, rho_Mov, phi_Mov )
%    FFD_GULL               (  13, Scale | Mark. List | FFD_BoxTag, j_Ind )
%    FFD_CAMBER             (  14, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind )
%    FFD_TWIST              (  15, Scale | Mark. List | FFD_BoxTag, j_Ind, x_Orig, y_Orig, z_Orig, x_End, y_End, z_End )
%    FFD_THICKNESS          (  16, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind )
%    FFD_ROTATION           (  18, Scale | Mark. List | FFD_BoxTag, x_Axis, y_Axis, z_Axis, x_Turn, y_Turn, z_Turn )
%    FFD_ANGLE_OF_ATTACK    (  24, Scale | Mark. List | FFD_BoxTag, 1.0 )
%
% Global design variables
%    TRANSLATION            (   1, Scale | Mark. List | x_Disp, y_Disp, z_Disp )
%    ROTATION               (   2, Scale | Mark. List | x_Axis, y_Axis, z_Axis, x_Turn, y_Turn, z_Turn )
%
% Definition of multipoint design problems, this option should be combined with the
% the prefix MULTIPOINT in the objective function or constraint (e.g. MULTIPOINT_DRAG, MULTIPOINT_LIFT, etc.)
MULTIPOINT_MACH_NUMBER= (0.79, 0.8, 0.81)
MULTIPOINT_AOA= (1.25, 1.25, 1.25)
MULTIPOINT_SIDESLIP_ANGLE= (0.0, 0.0, 0.0)
MULTIPOINT_TARGET_CL= (0.8, 0.8, 0.8)
MULTIPOINT_REYNOLDS_NUMBER= (1E6, 1E6, 1E6)
MULTIPOINT_FREESTREAM_PRESSURE= (101325.0, 101325.0, 101325.0)
MULTIPOINT_FREESTREAM_TEMPERATURE= (288.15, 288.15, 288.15)
MULTIPOINT_OUTLET_VALUE= (0.0, 0.0, 0.0)
MULTIPOINT_WEIGHT= (0.33333, 0.33333, 0.33333)
MULTIPOINT_MESH_FILENAME= (mesh_NACA0012_m79.su2, mesh_NACA0012_m8.su2, mesh_NACA0012_m81.su2)
%
% Optimization objective function with scaling factor, separated by semicolons.
% To include quadratic penalty function: use OPT_CONSTRAINT option syntax within the OPT_OBJECTIVE list.
% ex= Objective * Scale
OPT_OBJECTIVE= DRAG
%
% Optimization constraint functions with pushing factors (affects its value, not the gradient  in the python scripts), separated by semicolons
% ex= (Objective = Value ) * Scale, use '>','<','='
OPT_CONSTRAINT= ( LIFT > 0.328188 ) * 0.001; ( MOMENT_Z > 0.034068 ) * 0.001; ( AIRFOIL_THICKNESS > 0.11 ) * 0.001
%
% Factor to reduce the norm of the gradient (affects the objective function and gradient in the python scripts)
% In general, a norm of the gradient ~1E-6 is desired.
OPT_GRADIENT_FACTOR= 1E-6
%
% Factor to relax or accelerate the optimizer convergence (affects the line search in SU2_DEF)
% In general, surface deformations of 0.01'' or 0.0001m are desirable
OPT_RELAX_FACTOR= 1E3
%
% Maximum number of iterations
OPT_ITERATIONS= 100
%
% Requested accuracy
OPT_ACCURACY= 1E-10
%
% Optimization bound (bounds the line search in SU2_DEF)
OPT_LINE_SEARCH_BOUND= 1E6
%
% Upper bound for each design variable (bound in the python optimizer)
OPT_BOUND_UPPER= 1E10
%
% Lower bound for each design variable (bound in the python optimizer)
OPT_BOUND_LOWER= -1E10
%
% Finite difference step size for python scripts (0.001 default, recommended
%                                                 0.001 x REF_LENGTH)
FIN_DIFF_STEP = 0.001
%
% Optimization design variables, separated by semicolons
DEFINITION_DV= ( 1, 1.0 | airfoil | 0, 0.05 ); ( 1, 1.0 | airfoil | 0, 0.10 ); ( 1, 1.0 | airfoil | 0, 0.15 ); ( 1, 1.0 | airfoil | 0, 0.20 ); ( 1, 1.0 | airfoil | 0, 0.25 ); ( 1, 1.0 | airfoil | 0, 0.30 ); ( 1, 1.0 | airfoil | 0, 0.35 ); ( 1, 1.0 | airfoil | 0, 0.40 ); ( 1, 1.0 | airfoil | 0, 0.45 ); ( 1, 1.0 | airfoil | 0, 0.50 ); ( 1, 1.0 | airfoil | 0, 0.55 ); ( 1, 1.0 | airfoil | 0, 0.60 ); ( 1, 1.0 | airfoil | 0, 0.65 ); ( 1, 1.0 | airfoil | 0, 0.70 ); ( 1, 1.0 | airfoil | 0, 0.75 ); ( 1, 1.0 | airfoil | 0, 0.80 ); ( 1, 1.0 | airfoil | 0, 0.85 ); ( 1, 1.0 | airfoil | 0, 0.90 ); ( 1, 1.0 | airfoil | 0, 0.95 ); ( 1, 1.0 | airfoil | 1, 0.05 ); ( 1, 1.0 | airfoil | 1, 0.10 ); ( 1, 1.0 | airfoil | 1, 0.15 ); ( 1, 1.0 | airfoil | 1, 0.20 ); ( 1, 1.0 | airfoil | 1, 0.25 ); ( 1, 1.0 | airfoil | 1, 0.30 ); ( 1, 1.0 | airfoil | 1, 0.35 ); ( 1, 1.0 | airfoil | 1, 0.40 ); ( 1, 1.0 | airfoil | 1, 0.45 ); ( 1, 1.0 | airfoil | 1, 0.50 ); ( 1, 1.0 | airfoil | 1, 0.55 ); ( 1, 1.0 | airfoil | 1, 0.60 ); ( 1, 1.0 | airfoil | 1, 0.65 ); ( 1, 1.0 | airfoil | 1, 0.70 ); ( 1, 1.0 | airfoil | 1, 0.75 ); ( 1, 1.0 | airfoil | 1, 0.80 ); ( 1, 1.0 | airfoil | 1, 0.85 ); ( 1, 1.0 | airfoil | 1, 0.90 ); ( 1, 1.0 | airfoil | 1, 0.95 )
%
% Use combined objective within gradient evaluation: may reduce cost to compute gradients when using the adjoint formulation.
OPT_COMBINE_OBJECTIVE = NO
